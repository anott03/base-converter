{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","inputNum","setInputNum","outputNum","setOutputNum","selectedBase","setSelectedBase","bases","Array","from","keys","filter","n","useEffect","console","log","toString","className","href","Typography","variant","FormControl","Select","value","onChange","e","target","map","base","index","MenuItem","key","onSubmit","preventDefault","parseInt","type","Button","color","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gTAwEeA,MAnEf,WAAgB,IAAD,EACkCC,mBAAS,GAD3C,mBACNC,EADM,KACIC,EADJ,OAEoCF,mBAAS,GAF7C,mBAENG,EAFM,KAEKC,EAFL,OAG0CJ,mBAAS,GAHnD,mBAGNK,EAHM,KAGQC,EAHR,KAKPC,EAAQC,MAAMC,KAAKD,MAAM,IAAIE,QAAQC,QAAO,SAAAC,GAAC,OAAU,IAANA,GAAiB,IAANA,KAmBlE,OAjBAC,qBAAU,WACRC,QAAQC,IAAK,GAAGC,SAAS,MACxB,IAgBD,yBAAKC,UAAU,OACb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,cAAd,kBACA,yBAAKA,UAAU,oBACb,uBAAGC,KAAK,iDAAR,YAIJ,yBAAKD,UAAU,aAEb,yBAAKA,UAAU,0BAEb,kBAACE,EAAA,EAAD,CAAYC,QAAQ,KAAKH,UAAU,mBAAnC,gCAEA,kBAACI,EAAA,EAAD,CAAaJ,UAAU,iBACrB,kBAACK,EAAA,EAAD,CAAQL,UAAU,sBAAsBG,QAAQ,WAC9CG,MAAOlB,EAAcmB,SArBZ,SAACC,GACpBnB,EAAgBmB,EAAEC,OAAOH,SAqBbhB,EAAMoB,KAAI,SAACC,EAAcC,GAAf,OAAkC,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAON,MAAOK,GAAOA,SAMxF,0BAAMX,UAAU,iBAAiBe,SAjCX,SAACP,GAC3BA,EAAEQ,iBACF7B,EAAa8B,SAASjC,EAASe,SAASX,OAgClC,yBAAKY,UAAU,kBACb,kBAACE,EAAA,EAAD,CAAYC,QAAQ,KAAKH,UAAU,mBAAnC,WACA,2BAAOkB,KAAK,SAASZ,MAAOtB,EAAUuB,SAxCvB,SAACC,GACxBA,EAAEC,OAAOH,MAAQ,EAAIrB,EAAY,GAAKA,EAAYgC,SAAST,EAAEC,OAAOH,YAyC9D,kBAACa,EAAA,EAAD,CAAQD,KAAK,SAASf,QAAQ,YAAYiB,MAAM,WAAhD,YAEF,yBAAKpB,UAAU,kBACK,GAAhBZ,EACF,kBAACc,EAAA,EAAD,CAAYC,QAAQ,KAAKH,UAAU,mBAAnC,UACE,kBAACE,EAAA,EAAD,CAAYC,QAAQ,KAAKH,UAAU,mBAAnC,QAA4DZ,GAE9D,2BAAO8B,KAAK,SAASZ,MAAOpB,EAAWmC,UAAQ,QCrDrCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.21a607db.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport { Typography, MenuItem, FormControl, Select, Button} from '@material-ui/core';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\n\nfunction App() {\n  const [inputNum, setInputNum]: [number, any] = useState(0);\n  const [outputNum, setOutputNum]: [number, any] = useState(0);\n  const [selectedBase, setSelectedBase]: [number, any] = useState(2);\n\n  const bases = Array.from(Array(37).keys()).filter(n => n !== 0 && n !== 1);\n\n  useEffect(() => {\n    console.log((7).toString(2));\n  }, []);\n\n  const onInputNumChange = (e: any) => {\n    e.target.value < 0 ? setInputNum(0) : setInputNum(parseInt(e.target.value));\n  }\n\n  const calculateConversion = (e: any) => {\n    e.preventDefault();\n    setOutputNum(parseInt(inputNum.toString(selectedBase)));\n  }\n\n  const onBaseChange = (e: any) => {\n    setSelectedBase(e.target.value);\n  }\n  \n  return (\n    <div className=\"app\">\n      <div className=\"app__header\">\n        <h1 className='app__title'>Base Converter</h1>\n        <div className=\"app__headerLinks\">\n          <a href=\"https://github.com/anott03/base-converter.git\">Github</a>\n        </div>\n      </div>\n\n      <div className=\"app__body\">\n\n        <div className=\"app__conversionChoices\">\n\n          <Typography variant='h5' className='app__inputLabel' >Convert from base 10 to base</Typography>\n\n          <FormControl className=\"app__dropdown\">\n            <Select className=\"app__dropdownSelect\" variant=\"outlined\"\n              value={selectedBase} onChange={onBaseChange}>\n              { bases.map((base: number, index: number) => (<MenuItem key={index} value={base}>{base}</MenuItem>)) }\n            </Select>\n          </FormControl>\n\n        </div>\n\n        <form className=\"app__inputForm\" onSubmit={calculateConversion}>\n          <div className=\"app__formInput\">\n            <Typography variant='h5' className='app__inputLabel' >Base 10</Typography>\n            <input type=\"number\" value={inputNum} onChange={onInputNumChange}/>\n          </div>\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">Convert</Button>\n        </form>\n        <div className=\"app__formInput\">\n          { selectedBase == 2 ?\n          <Typography variant='h5' className='app__inputLabel' >Binary</Typography>\n          : <Typography variant='h5' className='app__inputLabel' >Base {selectedBase}</Typography>\n          }\n          <input type=\"number\" value={outputNum} disabled/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}